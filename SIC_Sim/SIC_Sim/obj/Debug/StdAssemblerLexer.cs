//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\MILAN\Documents\Visual Studio 2015\Projects\SIC_SimV2\SIC_Sim\StdAssembler.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SIC_Sim {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class StdAssemblerLexer : Lexer {
	public const int
		WS=1, NL=2, COMA=3, CHAR=4, HEX=5, H=6, APOSTROFE=7, START=8, END=9, RSUB=10, 
		BYTE=11, WORD=12, RESB=13, RESW=14, CODOP=15, HEXVAL=16, ASCIIVAL=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "NL", "COMA", "CHAR", "HEX", "H", "APOSTROFE", "START", "END", "RSUB", 
		"BYTE", "WORD", "RESB", "RESW", "CODOP", "HEXVAL", "ASCIIVAL"
	};


	public StdAssemblerLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'\n'", "','", "'C'", "'X'", null, "'''", "'START'", "'END'", 
		"'RSUB'", "'BYTE'", "'WORD'", "'RESB'", "'RESW'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NL", "COMA", "CHAR", "HEX", "H", "APOSTROFE", "START", "END", 
		"RSUB", "BYTE", "WORD", "RESB", "RESW", "CODOP", "HEXVAL", "ASCIIVAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StdAssembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13\xAE\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\xA3\n\x10\x3\x11\x6\x11\xA6\n\x11\r\x11\xE\x11\xA7\x3\x12\x6\x12\xAB"+
		"\n\x12\r\x12\xE\x12\xAC\x2\x2\x2\x13\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13\x3\x2\x6\x5\x2\v\v\xF\xF"+
		"\"\"\x4\x2JJjj\x4\x2\x32;\x43H\x3\x2\x43\\\xC7\x2\x3\x3\x2\x2\x2\x2\x5"+
		"\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x3%\x3\x2\x2\x2\x5)\x3\x2\x2\x2\a+\x3\x2\x2\x2\t-\x3\x2\x2\x2\v/\x3\x2"+
		"\x2\x2\r\x31\x3\x2\x2\x2\xF\x33\x3\x2\x2\x2\x11\x35\x3\x2\x2\x2\x13;\x3"+
		"\x2\x2\x2\x15?\x3\x2\x2\x2\x17\x44\x3\x2\x2\x2\x19I\x3\x2\x2\x2\x1BN\x3"+
		"\x2\x2\x2\x1DS\x3\x2\x2\x2\x1F\xA2\x3\x2\x2\x2!\xA5\x3\x2\x2\x2#\xAA\x3"+
		"\x2\x2\x2%&\t\x2\x2\x2&\'\x3\x2\x2\x2\'(\b\x2\x2\x2(\x4\x3\x2\x2\x2)*"+
		"\a\f\x2\x2*\x6\x3\x2\x2\x2+,\a.\x2\x2,\b\x3\x2\x2\x2-.\a\x45\x2\x2.\n"+
		"\x3\x2\x2\x2/\x30\aZ\x2\x2\x30\f\x3\x2\x2\x2\x31\x32\t\x3\x2\x2\x32\xE"+
		"\x3\x2\x2\x2\x33\x34\a)\x2\x2\x34\x10\x3\x2\x2\x2\x35\x36\aU\x2\x2\x36"+
		"\x37\aV\x2\x2\x37\x38\a\x43\x2\x2\x38\x39\aT\x2\x2\x39:\aV\x2\x2:\x12"+
		"\x3\x2\x2\x2;<\aG\x2\x2<=\aP\x2\x2=>\a\x46\x2\x2>\x14\x3\x2\x2\x2?@\a"+
		"T\x2\x2@\x41\aU\x2\x2\x41\x42\aW\x2\x2\x42\x43\a\x44\x2\x2\x43\x16\x3"+
		"\x2\x2\x2\x44\x45\a\x44\x2\x2\x45\x46\a[\x2\x2\x46G\aV\x2\x2GH\aG\x2\x2"+
		"H\x18\x3\x2\x2\x2IJ\aY\x2\x2JK\aQ\x2\x2KL\aT\x2\x2LM\a\x46\x2\x2M\x1A"+
		"\x3\x2\x2\x2NO\aT\x2\x2OP\aG\x2\x2PQ\aU\x2\x2QR\a\x44\x2\x2R\x1C\x3\x2"+
		"\x2\x2ST\aT\x2\x2TU\aG\x2\x2UV\aU\x2\x2VW\aY\x2\x2W\x1E\x3\x2\x2\x2XY"+
		"\a\x43\x2\x2YZ\a\x46\x2\x2Z\xA3\a\x46\x2\x2[\\\a\x43\x2\x2\\]\aP\x2\x2"+
		"]\xA3\a\x46\x2\x2^_\a\x45\x2\x2_`\aQ\x2\x2`\x61\aO\x2\x2\x61\xA3\aR\x2"+
		"\x2\x62\x63\a\x46\x2\x2\x63\x64\aK\x2\x2\x64\xA3\aX\x2\x2\x65\xA3\aL\x2"+
		"\x2\x66g\aL\x2\x2gh\aG\x2\x2h\xA3\aS\x2\x2ij\aL\x2\x2jk\aI\x2\x2k\xA3"+
		"\aV\x2\x2lm\aL\x2\x2mn\aN\x2\x2n\xA3\aV\x2\x2op\aL\x2\x2pq\aU\x2\x2qr"+
		"\aW\x2\x2r\xA3\a\x44\x2\x2st\aN\x2\x2tu\a\x46\x2\x2u\xA3\a\x43\x2\x2v"+
		"w\aN\x2\x2wx\a\x46\x2\x2xy\a\x45\x2\x2y\xA3\aJ\x2\x2z{\aN\x2\x2{|\a\x46"+
		"\x2\x2|\xA3\aN\x2\x2}~\aN\x2\x2~\x7F\a\x46\x2\x2\x7F\xA3\aZ\x2\x2\x80"+
		"\x81\aO\x2\x2\x81\x82\aW\x2\x2\x82\xA3\aN\x2\x2\x83\x84\aQ\x2\x2\x84\xA3"+
		"\aT\x2\x2\x85\x86\aT\x2\x2\x86\xA3\a\x46\x2\x2\x87\x88\aU\x2\x2\x88\x89"+
		"\aV\x2\x2\x89\xA3\a\x43\x2\x2\x8A\x8B\aU\x2\x2\x8B\x8C\aV\x2\x2\x8C\x8D"+
		"\a\x45\x2\x2\x8D\xA3\aJ\x2\x2\x8E\x8F\aU\x2\x2\x8F\x90\aV\x2\x2\x90\xA3"+
		"\aN\x2\x2\x91\x92\aU\x2\x2\x92\x93\aV\x2\x2\x93\x94\aU\x2\x2\x94\xA3\a"+
		"Y\x2\x2\x95\x96\aU\x2\x2\x96\x97\aV\x2\x2\x97\xA3\aZ\x2\x2\x98\x99\aU"+
		"\x2\x2\x99\x9A\aW\x2\x2\x9A\xA3\a\x44\x2\x2\x9B\x9C\aV\x2\x2\x9C\xA3\a"+
		"\x46\x2\x2\x9D\x9E\aV\x2\x2\x9E\x9F\aK\x2\x2\x9F\xA3\aZ\x2\x2\xA0\xA1"+
		"\aY\x2\x2\xA1\xA3\a\x46\x2\x2\xA2X\x3\x2\x2\x2\xA2[\x3\x2\x2\x2\xA2^\x3"+
		"\x2\x2\x2\xA2\x62\x3\x2\x2\x2\xA2\x65\x3\x2\x2\x2\xA2\x66\x3\x2\x2\x2"+
		"\xA2i\x3\x2\x2\x2\xA2l\x3\x2\x2\x2\xA2o\x3\x2\x2\x2\xA2s\x3\x2\x2\x2\xA2"+
		"v\x3\x2\x2\x2\xA2z\x3\x2\x2\x2\xA2}\x3\x2\x2\x2\xA2\x80\x3\x2\x2\x2\xA2"+
		"\x83\x3\x2\x2\x2\xA2\x85\x3\x2\x2\x2\xA2\x87\x3\x2\x2\x2\xA2\x8A\x3\x2"+
		"\x2\x2\xA2\x8E\x3\x2\x2\x2\xA2\x91\x3\x2\x2\x2\xA2\x95\x3\x2\x2\x2\xA2"+
		"\x98\x3\x2\x2\x2\xA2\x9B\x3\x2\x2\x2\xA2\x9D\x3\x2\x2\x2\xA2\xA0\x3\x2"+
		"\x2\x2\xA3 \x3\x2\x2\x2\xA4\xA6\t\x4\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA7"+
		"\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\"\x3\x2\x2\x2"+
		"\xA9\xAB\t\x5\x2\x2\xAA\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAA\x3"+
		"\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD$\x3\x2\x2\x2\x6\x2\xA2\xA7\xAC\x3\b"+
		"\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SIC_Sim
