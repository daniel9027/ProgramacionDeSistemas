//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\becarios\Documents\GitHub\ProgramacionDeSistemas\SIC_Sim\SIC_Sim\StdAssembler.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SIC_Sim {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class StdAssemblerLexer : Lexer {
	public const int
		INT=1, DOUBLE=2, PI=3, E=4, POW=5, NL=6, WS=7, ID=8, PLUS=9, EQUAL=10, 
		MINUS=11, MULT=12, DIV=13, LPAR=14, RPAR=15;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};


	public StdAssemblerLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'pi'", "'e'", "'^'", "'\n'", null, null, "'+'", "'='", 
		"'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StdAssembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x11V\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x6\x2#\n\x2\r\x2\xE\x2$\x3\x3\x6\x3(\n\x3\r\x3\xE\x3)\x3"+
		"\x3\x3\x3\x6\x3.\n\x3\r\x3\xE\x3/\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\b\x6\b<\n\b\r\b\xE\b=\x3\b\x3\b\x3\t\x3\t\a\t\x44"+
		"\n\t\f\t\xE\tG\v\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x2\x2\x2\x11\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2"+
		"\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE"+
		"\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11\x3\x2\x6\x3\x2\x32;\x5\x2\v\v\xF\xF\""+
		"\"\x4\x2\x43\\\x61\x61\x5\x2\x32;\x43\\\x61\x61Z\x2\x3\x3\x2\x2\x2\x2"+
		"\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2"+
		"\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x3\"\x3\x2\x2\x2\x5\'\x3"+
		"\x2\x2\x2\a\x31\x3\x2\x2\x2\t\x34\x3\x2\x2\x2\v\x36\x3\x2\x2\x2\r\x38"+
		"\x3\x2\x2\x2\xF;\x3\x2\x2\x2\x11\x41\x3\x2\x2\x2\x13H\x3\x2\x2\x2\x15"+
		"J\x3\x2\x2\x2\x17L\x3\x2\x2\x2\x19N\x3\x2\x2\x2\x1BP\x3\x2\x2\x2\x1DR"+
		"\x3\x2\x2\x2\x1FT\x3\x2\x2\x2!#\t\x2\x2\x2\"!\x3\x2\x2\x2#$\x3\x2\x2\x2"+
		"$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\x4\x3\x2\x2\x2&(\t\x2\x2\x2\'&\x3\x2\x2"+
		"\x2()\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*+\x3\x2\x2\x2+-\a\x30\x2"+
		"\x2,.\t\x2\x2\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2"+
		"\x2\x2\x30\x6\x3\x2\x2\x2\x31\x32\ar\x2\x2\x32\x33\ak\x2\x2\x33\b\x3\x2"+
		"\x2\x2\x34\x35\ag\x2\x2\x35\n\x3\x2\x2\x2\x36\x37\a`\x2\x2\x37\f\x3\x2"+
		"\x2\x2\x38\x39\a\f\x2\x2\x39\xE\x3\x2\x2\x2:<\t\x3\x2\x2;:\x3\x2\x2\x2"+
		"<=\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>?\x3\x2\x2\x2?@\b\b\x2\x2@"+
		"\x10\x3\x2\x2\x2\x41\x45\t\x4\x2\x2\x42\x44\t\x5\x2\x2\x43\x42\x3\x2\x2"+
		"\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x12\x3"+
		"\x2\x2\x2G\x45\x3\x2\x2\x2HI\a-\x2\x2I\x14\x3\x2\x2\x2JK\a?\x2\x2K\x16"+
		"\x3\x2\x2\x2LM\a/\x2\x2M\x18\x3\x2\x2\x2NO\a,\x2\x2O\x1A\x3\x2\x2\x2P"+
		"Q\a\x31\x2\x2Q\x1C\x3\x2\x2\x2RS\a*\x2\x2S\x1E\x3\x2\x2\x2TU\a+\x2\x2"+
		"U \x3\x2\x2\x2\b\x2$)/=\x45\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SIC_Sim
