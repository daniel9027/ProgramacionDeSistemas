//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\MILAN\Documents\GitHub\ProgramacionDeSistemas\SIC_Sim\SIC_Sim\StdAssembler.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SIC_Sim {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class StdAssemblerParser : Parser {
	public const int
		INT=1, DOUBLE=2, PI=3, E=4, POW=5, NL=6, WS=7, ID=8, PLUS=9, EQUAL=10, 
		MINUS=11, MULT=12, DIV=13, LPAR=14, RPAR=15;
	public const int
		RULE_prog = 0, RULE_input = 1, RULE_setVar = 2, RULE_plusOrMinus = 3, 
		RULE_multOrDiv = 4, RULE_pow = 5, RULE_unaryMinus = 6, RULE_atom = 7;
	public static readonly string[] ruleNames = {
		"prog", "input", "setVar", "plusOrMinus", "multOrDiv", "pow", "unaryMinus", 
		"atom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'pi'", "'e'", "'^'", "'\n'", null, null, "'+'", "'='", 
		"'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StdAssembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public StdAssemblerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 16; input();
				}
				}
				State = 19;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << PI) | (1L << E) | (1L << ID) | (1L << MINUS) | (1L << LPAR))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToSetVarContext : InputContext {
		public SetVarContext setVar() {
			return GetRuleContext<SetVarContext>(0);
		}
		public ToSetVarContext(InputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterToSetVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitToSetVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToSetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			_localctx = new ToSetVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; setVar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarContext : ParserRuleContext {
		public SetVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVar; } }
	 
		public SetVarContext() { }
		public virtual void CopyFrom(SetVarContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetVariableContext : SetVarContext {
		public ITerminalNode ID() { return GetToken(StdAssemblerParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(StdAssemblerParser.EQUAL, 0); }
		public SetVarContext setVar() {
			return GetRuleContext<SetVarContext>(0);
		}
		public SetVariableContext(SetVarContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterSetVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitSetVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalculateContext : SetVarContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public CalculateContext(SetVarContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterCalculate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitCalculate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVarContext setVar() {
		SetVarContext _localctx = new SetVarContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_setVar);
		try {
			State = 27;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 23; Match(ID);
				State = 24; Match(EQUAL);
				State = 25; setVar();
				}
				break;

			case 2:
				_localctx = new CalculateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; plusOrMinus(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(StdAssemblerParser.PLUS, 0); }
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public PlusContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(StdAssemblerParser.MINUS, 0); }
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public MinusContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterToMultOrDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitToMultOrDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(_ctx, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 30; multOrDiv(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 40;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new PlusContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 32;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 33; Match(PLUS);
						State = 34; multOrDiv(0);
						}
						break;

					case 2:
						{
						_localctx = new MinusContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 35;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 36; Match(MINUS);
						State = 37; multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 42;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicationContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(StdAssemblerParser.MULT, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public MultiplicationContext(MultOrDivContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(StdAssemblerParser.DIV, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public DivisionContext(MultOrDivContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToPowContext : MultOrDivContext {
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public ToPowContext(MultOrDivContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterToPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitToPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(_ctx, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToPowContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 44; pow();
			}
			_ctx.stop = _input.Lt(-1);
			State = 54;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 52;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 46;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 47; Match(MULT);
						State = 48; pow();
						}
						break;

					case 2:
						{
						_localctx = new DivisionContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 49;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 50; Match(DIV);
						State = 51; pow();
						}
						break;
					}
					} 
				}
				State = 56;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowContext : ParserRuleContext {
		public PowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pow; } }
	 
		public PowContext() { }
		public virtual void CopyFrom(PowContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PowerContext : PowContext {
		public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		public ITerminalNode POW() { return GetToken(StdAssemblerParser.POW, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public PowerContext(PowContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowContext pow() {
		PowContext _localctx = new PowContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_pow);
		try {
			_localctx = new PowerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; unaryMinus();
			State = 60;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 58; Match(POW);
				State = 59; pow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryMinusContext : ParserRuleContext {
		public UnaryMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryMinus; } }
	 
		public UnaryMinusContext() { }
		public virtual void CopyFrom(UnaryMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChangeSignContext : UnaryMinusContext {
		public ITerminalNode MINUS() { return GetToken(StdAssemblerParser.MINUS, 0); }
		public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		public ChangeSignContext(UnaryMinusContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterChangeSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitChangeSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnaryMinusContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnaryMinusContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterToAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitToAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryMinusContext unaryMinus() {
		UnaryMinusContext _localctx = new UnaryMinusContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_unaryMinus);
		try {
			State = 65;
			switch (_input.La(1)) {
			case MINUS:
				_localctx = new ChangeSignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; Match(MINUS);
				State = 63; unaryMinus();
				}
				break;
			case INT:
			case DOUBLE:
			case PI:
			case E:
			case ID:
			case LPAR:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoubleContext : AtomContext {
		public ITerminalNode DOUBLE() { return GetToken(StdAssemblerParser.DOUBLE, 0); }
		public DoubleContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantPIContext : AtomContext {
		public ITerminalNode PI() { return GetToken(StdAssemblerParser.PI, 0); }
		public ConstantPIContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterConstantPI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitConstantPI(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantPI(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(StdAssemblerParser.ID, 0); }
		public VariableContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantEContext : AtomContext {
		public ITerminalNode E() { return GetToken(StdAssemblerParser.E, 0); }
		public ConstantEContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterConstantE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitConstantE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracesContext : AtomContext {
		public ITerminalNode LPAR() { return GetToken(StdAssemblerParser.LPAR, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(StdAssemblerParser.RPAR, 0); }
		public BracesContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterBraces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitBraces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : AtomContext {
		public ITerminalNode INT() { return GetToken(StdAssemblerParser.INT, 0); }
		public IntContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStdAssemblerListener typedListener = listener as IStdAssemblerListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStdAssemblerVisitor<TResult> typedVisitor = visitor as IStdAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 76;
			switch (_input.La(1)) {
			case PI:
				_localctx = new ConstantPIContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(PI);
				}
				break;
			case E:
				_localctx = new ConstantEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(E);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; Match(DOUBLE);
				}
				break;
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; Match(INT);
				}
				break;
			case ID:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 71; Match(ID);
				}
				break;
			case LPAR:
				_localctx = new BracesContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 72; Match(LPAR);
				State = 73; plusOrMinus(0);
				State = 74; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);

		case 4: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11Q\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\x6\x2\x14\n\x2\r\x2\xE\x2\x15\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x1E\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\a\x5)\n\x5\f\x5\xE\x5,\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\x37\n\x6\f\x6\xE\x6:\v\x6\x3\a\x3\a\x3\a\x5\a?\n"+
		"\a\x3\b\x3\b\x3\b\x5\b\x44\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x5\tO\n\t\x3\t\x2\x2\x4\b\n\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x2\x2U\x2\x13\x3\x2\x2\x2\x4\x17\x3\x2\x2\x2\x6\x1D\x3\x2\x2"+
		"\x2\b\x1F\x3\x2\x2\x2\n-\x3\x2\x2\x2\f;\x3\x2\x2\x2\xE\x43\x3\x2\x2\x2"+
		"\x10N\x3\x2\x2\x2\x12\x14\x5\x4\x3\x2\x13\x12\x3\x2\x2\x2\x14\x15\x3\x2"+
		"\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x3\x3\x2\x2\x2\x17"+
		"\x18\x5\x6\x4\x2\x18\x5\x3\x2\x2\x2\x19\x1A\a\n\x2\x2\x1A\x1B\a\f\x2\x2"+
		"\x1B\x1E\x5\x6\x4\x2\x1C\x1E\x5\b\x5\x2\x1D\x19\x3\x2\x2\x2\x1D\x1C\x3"+
		"\x2\x2\x2\x1E\a\x3\x2\x2\x2\x1F \b\x5\x1\x2 !\x5\n\x6\x2!*\x3\x2\x2\x2"+
		"\"#\f\x5\x2\x2#$\a\v\x2\x2$)\x5\n\x6\x2%&\f\x4\x2\x2&\'\a\r\x2\x2\')\x5"+
		"\n\x6\x2(\"\x3\x2\x2\x2(%\x3\x2\x2\x2),\x3\x2\x2\x2*(\x3\x2\x2\x2*+\x3"+
		"\x2\x2\x2+\t\x3\x2\x2\x2,*\x3\x2\x2\x2-.\b\x6\x1\x2./\x5\f\a\x2/\x38\x3"+
		"\x2\x2\x2\x30\x31\f\x5\x2\x2\x31\x32\a\xE\x2\x2\x32\x37\x5\f\a\x2\x33"+
		"\x34\f\x4\x2\x2\x34\x35\a\xF\x2\x2\x35\x37\x5\f\a\x2\x36\x30\x3\x2\x2"+
		"\x2\x36\x33\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3"+
		"\x2\x2\x2\x39\v\x3\x2\x2\x2:\x38\x3\x2\x2\x2;>\x5\xE\b\x2<=\a\a\x2\x2"+
		"=?\x5\f\a\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\r\x3\x2\x2\x2@\x41\a\r\x2\x2"+
		"\x41\x44\x5\xE\b\x2\x42\x44\x5\x10\t\x2\x43@\x3\x2\x2\x2\x43\x42\x3\x2"+
		"\x2\x2\x44\xF\x3\x2\x2\x2\x45O\a\x5\x2\x2\x46O\a\x6\x2\x2GO\a\x4\x2\x2"+
		"HO\a\x3\x2\x2IO\a\n\x2\x2JK\a\x10\x2\x2KL\x5\b\x5\x2LM\a\x11\x2\x2MO\x3"+
		"\x2\x2\x2N\x45\x3\x2\x2\x2N\x46\x3\x2\x2\x2NG\x3\x2\x2\x2NH\x3\x2\x2\x2"+
		"NI\x3\x2\x2\x2NJ\x3\x2\x2\x2O\x11\x3\x2\x2\x2\v\x15\x1D(*\x36\x38>\x43"+
		"N";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SIC_Sim
